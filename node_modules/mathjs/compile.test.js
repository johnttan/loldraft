// test speed of differently compiled functions
var assert = require('assert'),
    mathjs = require('./index'),
    math = mathjs();

var COUNT = 100000;

// b = 2 * sqrt(9 - a)

function test1() {
  var f = new Function ('math',
      'return function (scope) {' +
      '  scope = scope || {};' +
      '  return scope["b"] = ' +
      '(scope["multiply"] || math["multiply"] || (function () {throw new Error("Undefined symbol multiply")})()) (' +
      '      2, ' +
      '      (scope["sqrt"] || math["sqrt"] || (function () {throw new Error("Undefined symbol sqrt")})()) (' +
      '        (scope["subtract"] || math["subtract"] || (function () {throw new Error("Undefined symbol subtract")})()) (' +
      '          9, ' +
      '          (scope["a"] || math["a"] || (function () {throw new Error("Undefined symbol a")})())' +
      '        )' +
      '     )' +
      '    );' +
      '}')(math);

  assert.equal(f({a:5}), 4);

  var scope = {a: 5};
  var start = +new Date();
  for (var i = 0; i < COUNT; i++) {
    var b = f(scope);
  }
  var end = +new Date();
  console.log('test1 duration ', end - start, 'ms');
}

function test2() {
  var symbol = function (math, name) {
    return function (scope) {
      scope = scope || {};
      return (scope[name] || math[name] || (function () {throw new Error('Undefined symbol ' + name)})());
    }
  };

  var value = function (math, value) {
    return function () {
      return value;
    }
  };

  var fn = function (math, symbol, params) {
    return function (scope) {
      var s = symbol(scope);
      return s.apply(s, params.map(function (param) {
        return param(scope);
      }));
    }
  };

  var assign = function (math, name, value) {
    return function (scope) {
      return scope[name] = value(scope);
    }
  };


  var f = assign(math, 'b', fn(math, symbol(math, 'multiply'), [
    value(math, 2),
    fn(math, symbol(math, 'sqrt'), [
      fn(math, symbol(math, 'subtract'), [
        value(math, 9),
        symbol(math, 'a')
      ])
    ])
  ]));

  assert.equal(f({a:5}), 4);

  var scope = {a: 5};
  var start = +new Date();
  for (var i = 0; i < COUNT; i++) {
    var b = f(scope);
  }
  var end = +new Date();
  console.log('test2 duration ', end - start, 'ms');
}

function test3 () {
  var scope = {a: 5};
  var f = math.parse('b = 2 * sqrt(9 - a)', scope);

  assert.equal(f.eval(), 4);

  var start = +new Date();
  for (var i = 0; i < COUNT; i++) {
    var b = f.eval();
  }
  var end = +new Date();
  console.log('test3 duration ', end - start, 'ms');
}

function test4 () {
  var f = math.parse('b = 2 * sqrt(9 - a)').compile(math);
  var scope = {a: 5};

  assert.equal(f.eval(scope), 4);

  var start = +new Date();
  for (var i = 0; i < COUNT; i++) {
    var b = f.eval(scope);
  }
  var end = +new Date();
  console.log('test4 duration ', end - start, 'ms');
}


test2();
test3();
test1();
test4();
